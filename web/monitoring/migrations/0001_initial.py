# Generated by Django 5.1.2 on 2024-11-27 14:46

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encryption_key', models.CharField(help_text='Encryption key used for API key encryption when needed.', max_length=255)),
                ('api_key', models.CharField(help_text='Primary API key for authorization of data send by device.', max_length=255, unique=True)),
                ('api_key_active', models.BooleanField(default=True, help_text='Indicates if the API key is currently active and valid.')),
                ('temporary_api_key', models.CharField(blank=True, help_text='A temporary API key field used when moving from old key to new one.', max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this device was created.')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='An optional name or title for this snapshot.', max_length=255)),
                ('location_latitude', models.DecimalField(decimal_places=6, help_text="Latitude of the device's location in decimal degrees. Must be between -90 and 90.", max_digits=9, validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
                ('location_longitude', models.DecimalField(decimal_places=6, help_text="Longitude of the device's location in decimal degrees. Must be between -180 and 180.", max_digits=9, validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)])),
                ('description', models.TextField(blank=True, help_text='Additional details or notes about the device snapshot.', null=True)),
                ('active', models.BooleanField(default=True, help_text='Indicates whether the device is currently operational. Depending on last update time.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this snapshot was created.')),
                ('device', models.ForeignKey(help_text='The device this snapshot is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='snapshots', to='monitoring.device')),
            ],
        ),
        migrations.CreateModel(
            name='SensorValues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='The date and time when the sensor data was recorded.')),
                ('atmospheric_pressure', models.FloatField(blank=True, help_text='Atmospheric pressure in hectopascals. Must be between 300 and 1100 hPa.', null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(1100)])),
                ('water_temperature', models.FloatField(blank=True, help_text='Water temperature in degrees Celsius. Must be between -50 and 100°C.', null=True, validators=[django.core.validators.MinValueValidator(-50), django.core.validators.MaxValueValidator(100)])),
                ('air_temperature', models.FloatField(blank=True, help_text='Air temperature in degrees Celsius. Must be between -50 and 60°C.', null=True, validators=[django.core.validators.MinValueValidator(-50), django.core.validators.MaxValueValidator(60)])),
                ('pm1_0', models.FloatField(blank=True, help_text='Particulate Matter 1.0 concentration in µg/m³.', null=True)),
                ('pm2_5', models.FloatField(blank=True, help_text='Particulate Matter 2.5 concentration in µg/m³.', null=True)),
                ('pm10', models.FloatField(blank=True, help_text='Particulate Matter 10 concentration in µg/m³.', null=True)),
                ('noise_level', models.FloatField(blank=True, help_text='Noise level measured in decibels.', null=True)),
                ('light_intensity', models.FloatField(blank=True, help_text='Light intensity in lux, which measures brightness.', null=True)),
                ('weather_condition', models.CharField(blank=True, help_text="Weather condition calculated on the device, e.g., 'Sunny', 'Cloudy'.", max_length=50, null=True)),
                ('device_snapshot', models.ForeignKey(help_text='The device that collected this sensor data.', on_delete=django.db.models.deletion.CASCADE, related_name='sensors', to='monitoring.devicesnapshot')),
            ],
        ),
    ]
